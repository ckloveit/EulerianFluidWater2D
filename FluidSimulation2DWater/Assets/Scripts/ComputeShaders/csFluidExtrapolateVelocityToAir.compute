// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateGridValidU
#pragma kernel UpdateGridValidV

#pragma kernel ExtrapolateU
#pragma kernel ExtrapolateV

#include "csFluidVariables.cginc"

RWTexture2D<float> gVelocityURead;
RWTexture2D<float> gVelocityUWrite;
RWTexture2D<float> gVelocityVRead;
RWTexture2D<float> gVelocityVWrite;
Texture2D<float> gLevelSet;

// grid marker for extrapolate 
RWTexture2D<uint> gGridMarker;
RWTexture2D<uint> gGridValidURead;
RWTexture2D<uint> gGridValidUWrite;
RWTexture2D<uint> gGridValidVRead;
RWTexture2D<uint> gGridValidVWrite;

[numthreads(8, 8, 1)]
void UpdateGridValidU(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _xSize + 1 || id.y >= _ySize)
		return;
	gGridValidURead[id.xy]	= 0;
	gGridValidUWrite[id.xy] = 0;
	if (id.x == 0 || id.x == _xSize)
		return;
	uint leftMarker = gGridMarker[uint2(id.x - 1, id.y)];
	uint rightMarker = gGridMarker[id.xy];
	if ((leftMarker == CELL_LIQUID || rightMarker == CELL_LIQUID) &&
		leftMarker != CELL_SOLID && rightMarker != CELL_SOLID)
	{
		gGridValidURead[id.xy] = 1;
		gGridValidUWrite[id.xy] = 1;
	}

	/*uint rightMarker = gGridMarker[id.xy];
	if (rightMarker == CELL_LIQUID)
	{
		gGridValidURead[id.xy] = 1;
		gGridValidUWrite[id.xy] = 1;
	}*/

}

[numthreads(8, 8, 1)]
void UpdateGridValidV(uint3 id : SV_DispatchThreadID)
{
	if (id.y >= _xSize || id.y >= _ySize + 1)
		return;
	gGridValidVRead[id.xy] = 0;
	gGridValidVWrite[id.xy] = 0;
	if (id.y == 0 || id.y == _ySize)
		return;

	uint downMarker = gGridMarker[uint2(id.x , id.y - 1)];
	uint upMarker = gGridMarker[id.xy];
	if ((downMarker == CELL_LIQUID || upMarker == CELL_LIQUID) &&
		downMarker != CELL_SOLID && upMarker != CELL_SOLID)
	{
		gGridValidVRead[id.xy] = 1;
		gGridValidVWrite[id.xy] = 1;
	}

	/*uint upMarker = gGridMarker[id.xy];
	if ((upMarker == CELL_LIQUID))
	{
		gGridValidVRead[id.xy] = 1;
		gGridValidVWrite[id.xy] = 1;
	}*/

}


[numthreads(8,8,1)]
void ExtrapolateU(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _xSize + 1 || id.y >= _ySize)
		return;

	if (id.x >= 1 && id.x < _xSize && id.y >= 1 && id.y < _ySize - 1)
	{
		float sum = 0;
		int count = 0;
		if (gGridValidURead[id.xy] == 0)
		{
			uint2 p0p1 = uint2(id.x, id.y + 1);
			uint2 p0m1 = uint2(id.x, id.y - 1);
			uint2 p1p0 = uint2(id.x + 1, id.y);
			uint2 p1m1 = uint2(id.x + 1, id.y - 1);
			uint2 p1p1 = uint2(id.x + 1, id.y + 1);
			uint2 m1p0 = uint2(id.x - 1, id.y);
			uint2 m1m1 = uint2(id.x - 1, id.y - 1);
			uint2 m1p1 = uint2(id.x - 1, id.y + 1);

			// we can average 3*3 neighbor

			if (gGridValidURead[p0p1] == 1) { sum += gVelocityURead[p0p1]; count++; }
			if (gGridValidURead[p0m1] == 1) { sum += gVelocityURead[p0m1]; count++; }

			if (gGridValidURead[p1p0] == 1) { sum += gVelocityURead[p1p0]; count++; }
			if (gGridValidURead[p1m1] == 1) { sum += gVelocityURead[p1m1]; count++; }
			if (gGridValidURead[p1p1] == 1) { sum += gVelocityURead[p1p1]; count++; }

			if (gGridValidURead[m1p0] == 1) { sum += gVelocityURead[m1p0]; count++; }
			if (gGridValidURead[m1m1] == 1) { sum += gVelocityURead[m1m1]; count++; }
			if (gGridValidURead[m1p1] == 1) { sum += gVelocityURead[m1p1]; count++; }

			if (count > 0)
			{
				gVelocityUWrite[id.xy] = sum / count;
				gGridValidUWrite[id.xy] = 1;
			}
		}
	}
}
[numthreads(8, 8, 1)]
void ExtrapolateV(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _xSize || id.y >= _ySize + 1)
		return;
	if (id.x >= 1 && id.x < _xSize - 1 && id.y >= 1 && id.y < _ySize)
	{
		float sum = 0;
		int count = 0;
		if (gGridValidVRead[id.xy] == 0)
		{
			uint2 p0p1 = uint2(id.x, id.y + 1);
			uint2 p0m1 = uint2(id.x, id.y - 1);
			uint2 p1p0 = uint2(id.x + 1, id.y);
			uint2 p1m1 = uint2(id.x + 1, id.y - 1);
			uint2 p1p1 = uint2(id.x + 1, id.y + 1);
			uint2 m1p0 = uint2(id.x - 1, id.y);
			uint2 m1m1 = uint2(id.x - 1, id.y - 1);
			uint2 m1p1 = uint2(id.x - 1, id.y + 1);

			// we can average 3*3 neighbor ,for now ,simple use 4
			if (gGridValidVRead[p0p1] == 1) { sum += gVelocityVRead[p0p1]; count++; }
			if (gGridValidVRead[p0m1] == 1) { sum += gVelocityVRead[p0m1]; count++; }

			if (gGridValidVRead[p1p0] == 1) { sum += gVelocityVRead[p1p0]; count++; }
			if (gGridValidVRead[p1m1] == 1) { sum += gVelocityVRead[p1m1]; count++; }
			if (gGridValidVRead[p1p1] == 1) { sum += gVelocityVRead[p1p1]; count++; }

			if (gGridValidVRead[m1p0] == 1) { sum += gVelocityVRead[m1p0]; count++; }
			if (gGridValidVRead[m1m1] == 1) { sum += gVelocityVRead[m1m1]; count++; }
			if (gGridValidVRead[m1p1] == 1) { sum += gVelocityVRead[m1p1]; count++; }

			if (count > 0)
			{
				gVelocityVWrite[id.xy] = sum / count;
				gGridValidVWrite[id.xy] = 1;
			}
		}
	}
}


