// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeJacobiPressure
#pragma kernel ApplyPressure

#include "csFluidVariables.cginc"

Texture2D<float> gVelocityDivergence;
RWTexture2D<float> gVelocityU;
RWTexture2D<float> gVelocityV;
Texture2D<uint> gGridMarker;

RWTexture2D<float> gPressure;

[numthreads(8, 8, 1)]
void ComputeJacobiPressure(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _xSize || id.y >= _ySize)
		return;
	float scale = _timeStep / (_gridSpace * _gridSpace * _density);

	float diag = 0.0, offDiag = 0.0;
	int leftNeighbor = id.x > 0 ? gGridMarker[uint2(id.x - 1, id.y)] : CELL_SOLID;
	int rightNeighbor = id.x < _xSize - 1 ? gGridMarker[uint2(id.x + 1, id.y)] : CELL_SOLID;
	int topNeighbor = id.y > 0 ? gGridMarker[uint2(id.x , id.y - 1)] : CELL_SOLID;
	int bottomNeighbor =id.y < _ySize - 1 ? gGridMarker[uint2(id.x , id.y + 1)] : CELL_SOLID;

	if (id.x > 0)
	{
		if (leftNeighbor == CELL_LIQUID)
		{
			diag += scale;
			offDiag -= scale * gPressure[uint2(id.x - 1, id.y)];
		}
		else if (leftNeighbor == CELL_AIR)
		{
			diag += scale;
		}
	}
	if (id.y > 0)
	{
		if (topNeighbor == CELL_LIQUID)
		{
			diag += scale;
			offDiag -= scale * gPressure[uint2(id.x, id.y - 1)];
		}
		else if (topNeighbor == CELL_AIR)
		{
			diag += scale;
		}
	}
	if (id.x < _xSize - 1)
	{
		if (rightNeighbor == CELL_LIQUID)
		{
			diag += scale;
			offDiag -= scale * gPressure[uint2(id.x + 1, id.y)];
		}
		else if (rightNeighbor == CELL_AIR)
		{
			diag += scale;
		}
	}
	if (id.y < _ySize - 1)
	{
		if (bottomNeighbor == CELL_LIQUID)
		{
			diag += scale;
			offDiag -= scale * gPressure[uint2(id.x, id.y + 1)];
		}
		else if (bottomNeighbor == CELL_AIR)
		{
			diag += scale;
		}
	}
	if (diag == 0)
		gPressure[id.xy] = 0;
	else
		gPressure[id.xy] = (gVelocityDivergence[id.xy] - offDiag) / diag;
}


[numthreads(8, 8, 1)]
void ApplyPressure(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _xSize || id.y >= _ySize)
		return;
	float scale = _timeStep / (_density * _gridSpace);
	if (id.x == 0)
	{
		gVelocityU[id.xy] -= scale * gPressure[id.xy];
	}
	else if (id.x == _xSize - 1)
	{
		gVelocityU[uint2(id.x + 1, id.y)] += scale * gPressure[id.xy];
		gVelocityU[id.xy] -= scale * (gPressure[id.xy] - gPressure[uint2(id.x - 1, id.y)]);
	}
	else
	{
		gVelocityU[id.xy] -= scale * (gPressure[id.xy] - gPressure[uint2(id.x - 1, id.y)]);
	}

	if (id.y == 0)
	{
		gVelocityV[id.xy] -= scale * gPressure[id.xy];
	}
	else if (id.y == _ySize - 1)
	{
		gVelocityV[uint2(id.x, id.y + 1)] += scale * gPressure[id.xy];
		gVelocityV[id.xy] -= scale * (gPressure[id.xy] - gPressure[uint2(id.x, id.y - 1)]);
	}
	else
	{
		gVelocityV[id.xy] -= scale * (gPressure[id.xy] - gPressure[uint2(id.x, id.y - 1)]);
	}
}
