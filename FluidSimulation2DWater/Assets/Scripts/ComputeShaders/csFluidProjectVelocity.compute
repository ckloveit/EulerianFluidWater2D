// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeJacobiPressure
#pragma kernel ApplyPressure
#pragma kernel SubtractPressureGradientX
#pragma kernel SubtractPressureGradientY

#pragma kernel FormPoisson
#pragma kernel RBGS

#include "csFluidVariables.cginc"

Texture2D<float> gVelocityDivergence;
RWTexture2D<float> gVelocityU;
RWTexture2D<float> gVelocityV;
Texture2D<uint> gGridMarker;

RWTexture2D<float> gPressure;

[numthreads(8, 8, 1)]
void ComputeJacobiPressure(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _xSize || id.y >= _ySize)
		return;
	float scale = _timeStep / (_gridSpace * _gridSpace * _density);

	float diag = 0.0, offDiag = 0.0;
	int leftNeighborMarker	 = id.x > 0 ? gGridMarker[uint2(id.x - 1, id.y)] : CELL_SOLID;
	int rightNeighborMarker  = id.x < _xSize - 1 ? gGridMarker[uint2(id.x + 1, id.y)] : CELL_SOLID;
	int topNeighborMarker	 = id.y > 0 ? gGridMarker[uint2(id.x , id.y - 1)] : CELL_SOLID;
	int bottomNeighborMarker = id.y < _ySize - 1 ? gGridMarker[uint2(id.x , id.y + 1)] : CELL_SOLID;
	//if (gGridMarker[id.xy] != CELL_LIQUID)
	//{
	//	gPressure[id.xy] = 0;
	//	return;
	//}

	if (id.x > 0)
	{
		if (leftNeighborMarker == CELL_LIQUID)
		{
			diag += scale;
			offDiag -= scale * gPressure[uint2(id.x - 1, id.y)];
		}
		else if (leftNeighborMarker == CELL_AIR)
		{
			diag += scale;
		}
	}
	if (id.y > 0)
	{
		if (topNeighborMarker == CELL_LIQUID)
		{
			diag += scale;
			offDiag -= scale * gPressure[uint2(id.x, id.y - 1)];
		}
		else if (topNeighborMarker == CELL_AIR)
		{
			diag += scale;
		}
	}
	if (id.x < _xSize - 1)
	{
		if (rightNeighborMarker == CELL_LIQUID)
		{
			diag += scale;
			offDiag -= scale * gPressure[uint2(id.x + 1, id.y)];
		}
		else if (rightNeighborMarker == CELL_AIR)
		{
			diag += scale;
		}
	}
	if (id.y < _ySize - 1)
	{
		if (bottomNeighborMarker == CELL_LIQUID)
		{
			diag += scale;
			offDiag -= scale * gPressure[uint2(id.x, id.y + 1)];
		}
		else if (bottomNeighborMarker == CELL_AIR)
		{
			diag += scale;
		}
	}
	if (diag == 0)
		gPressure[id.xy] = 0;
	else
		gPressure[id.xy] = (gVelocityDivergence[id.xy] - offDiag) / diag;
}

[numthreads(8, 8, 1)]
void ApplyPressure(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _xSize || id.y >= _ySize)
		return;
	float scale = _timeStep / (_density * _gridSpace);
	if (id.x == 0)
	{
		gVelocityU[id.xy] -= scale * gPressure[id.xy];
	}
	else if (id.x == _xSize - 1)
	{
		gVelocityU[uint2(id.x + 1, id.y)] += scale * gPressure[id.xy];
		gVelocityU[id.xy] -= scale * (gPressure[id.xy] - gPressure[uint2(id.x - 1, id.y)]);
	}
	else
	{
		gVelocityU[id.xy] -= scale * (gPressure[id.xy] - gPressure[uint2(id.x - 1, id.y)]);
	}

	if (id.y == 0)
	{
		gVelocityV[id.xy] -= scale * gPressure[id.xy];
	}
	else if (id.y == _ySize - 1)
	{
		gVelocityV[uint2(id.x, id.y + 1)] += scale * gPressure[id.xy];
		gVelocityV[id.xy] -= scale * (gPressure[id.xy] - gPressure[uint2(id.x, id.y - 1)]);
	}
	else
	{
		gVelocityV[id.xy] -= scale * (gPressure[id.xy] - gPressure[uint2(id.x, id.y - 1)]);
	}
}

Texture2D<float> gLevelSet;
[numthreads(8, 8, 1)]
void SubtractPressureGradientX(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _xSize + 1 || id.y >= _ySize)
		return;
	if (id.x == 0 || id.x == _xSize)
		return;

	float scale = _timeStep / (_density * _gridSpace);
	uint2 leftID = uint2(id.x - 1, id.y);
	float pressureCurrent = gPressure[id.xy];
	float pressurePrevious = gPressure[leftID];
	if (gLevelSet[id.xy] * gLevelSet[leftID] < 0)
	{
		if (CELL_AIR == gGridMarker[id.xy])
		{
			pressureCurrent = gLevelSet[id.xy] / min(1e-6, gLevelSet[leftID]) * gPressure[leftID];
		}
		if (CELL_AIR == gGridMarker[leftID])
		{
			pressurePrevious = gLevelSet[leftID] / min(1e-6, gLevelSet[id.xy]) * gPressure[id.xy];
		}

		/*if (CELL_AIR == gGridMarker[id.xy])
		{
			pressureCurrent = gLevelSet[id.xy] / min(1e-3, gLevelSet[leftID]) * gPressure[leftID];
		}
		if (CELL_AIR == gGridMarker[leftID])
		{
			pressurePrevious = gLevelSet[leftID] / min(1e-6, gLevelSet[id.xy]) * gPressure[id.xy];
		}*/
	}
	gVelocityU[id.xy] -= /*scale * */(pressureCurrent - pressurePrevious);

	//// from bridson book 
	//if (gLevelSet[id.xy] <= 0 || gLevelSet[leftID] <= 0)
	//{
	//	if (gGridMarker[id.xy] == CELL_SOLID || gGridMarker[leftID] == CELL_SOLID)
	//		gVelocityU[id.xy] = 0;
	//	else
	//		gVelocityU[id.xy] -= scale * (pressureCurrent - pressurePrevious);
	//}
}

[numthreads(8, 8, 1)]
void SubtractPressureGradientY(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _xSize || id.y >= _ySize + 1)
		return;
	if (id.y == 0 || id.y == _ySize)
		return;
	float scale = _timeStep / (_density * _gridSpace);
	uint2 leftID = uint2(id.x , id.y - 1);
	float pressureCurrent = gPressure[id.xy];
	float pressurePrevious = gPressure[leftID];

	if (gLevelSet[id.xy] * gLevelSet[leftID] < 0)
	{
		if (CELL_AIR == gGridMarker[id.xy])
		{
			pressureCurrent = gLevelSet[id.xy] / min(1e-6, gLevelSet[leftID]) * gPressure[leftID];
		}
		if (CELL_AIR == gGridMarker[leftID])
		{
			pressurePrevious = gLevelSet[leftID] / min(1e-6, gLevelSet[id.xy]) * gPressure[id.xy];
		}

		/*if (CELL_AIR == gGridMarker[id.xy])
		{
			pressureCurrent = gLevelSet[id.xy] / min(1e-3, gLevelSet[leftID]) * gPressure[leftID];
		}
		if (CELL_AIR == gGridMarker[leftID])
		{
			pressurePrevious = gLevelSet[leftID] / min(1e-6, gLevelSet[id.xy]) * gPressure[id.xy];
		}*/
	}
	gVelocityV[id.xy] -= /*scale * */(pressureCurrent - pressurePrevious);


	//// from bridson book 
	//if (gLevelSet[id.xy] <= 0 || gLevelSet[leftID] <= 0)
	//{
	//	if(gGridMarker[id.xy] == CELL_SOLID || gGridMarker[leftID] == CELL_SOLID)
	//		gVelocityV[id.xy] = 0;
	//	else
	//		gVelocityV[id.xy] -= scale * (pressureCurrent - pressurePrevious);
	//}

}



// red-black gauss-sebel 
RWTexture2D<float> gPoisson0;
RWTexture2D<float> gPoisson1;
RWTexture2D<float> gPoisson2;
Texture2D<float> gLevelset;
[numthreads(8, 8, 1)]
void FormPoisson(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _xSize || id.y >= _ySize)
		return;
	gPoisson0[id.xy] = 0;
	gPoisson1[id.xy] = 0;
	gPoisson2[id.xy] = 0;
	int i = id.x;
	int j = id.y;

	if (CELL_LIQUID== gGridMarker[id.xy])
	{
		float diag = 4.0;
		int q[4][2] = {
			{i - 1,j},
			{i + 1,j},
			{i,j - 1},
			{i,j + 1}
		};
		
		for (int m = 0; m < 4; m++)
		{
			uint2 cur = uint2(q[m][0], q[m][1]);
			if (gGridMarker[cur] == CELL_SOLID)
			{
				diag -= 1.0;
			}
			else if (gGridMarker[cur] == CELL_AIR)
			{
				diag -= gLevelset[cur] / min(1.0e-6, gLevelset[id.xy]);
			}
		}
		gPoisson0[id.xy] = diag;
	}
	if (CELL_LIQUID == gGridMarker[id.xy])
	{
		if (CELL_LIQUID == gGridMarker[uint2(i + 1, j)])
			gPoisson1[id.xy] = -1;
		if (CELL_LIQUID == gGridMarker[uint2(i , j + 1)])
			gPoisson2[id.xy] = -1;
	}

}


uint _redOrBlack;
[numthreads(8, 8, 1)]
void RBGS(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _xSize || id.y >= _ySize)
		return;
	int i = id.x;
	int j = id.y;
	if ((i + j) % 2 == _redOrBlack && CELL_LIQUID == gGridMarker[uint2(i, j)])
	{
		float p_x0 = gPressure[uint2(i - 1, j)] * gPoisson1[uint2(i - 1, j)];
		float p_x1 = gPressure[uint2(i + 1, j)] * gPoisson1[uint2(i,	 j)];
		float p_y0 = gPressure[uint2(i, j - 1)] * gPoisson2[uint2(i, j - 1)];
		float p_y1 = gPressure[uint2(i, j + 1)] * gPoisson2[uint2(i,	 j)];
		float diag = gPoisson0[uint2(i, j)];
		gPressure[uint2(i, j)] = (gVelocityDivergence[uint2(i, j)] - (p_x0 + p_x1 + p_y0 + p_y1)) / diag;
	}
	// don't add these code... it will break imcompressible
	//else
	//{
	//	gPressure[uint2(i, j)] = 0;
	//}
}
